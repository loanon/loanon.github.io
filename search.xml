<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo升级next主题并使用gitalk作为评论插件]]></title>
    <url>%2F2019%2F09%2F23%2Fhexo-theme-next-update-and-gitalk%2F</url>
    <content type="text"><![CDATA[升级主题先立标题，内容后续再补。 使用gitalk评论插件先立标题，内容后续再补。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next，gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客尝试使用gitment作为评论插件]]></title>
    <url>%2F2019%2F09%2F22%2Fhexo-gitment-1%2F</url>
    <content type="text"><![CDATA[背景博客主题是next，准备采用gitment插件作为评论插件。虽然知道没几个人看但是还是想弄一下。万一有人发现我的不足之处，还能提点意见。 采用gitment的原因是看到之前多说的关闭，觉得寻找一个稳定的服务还是很必要的。看到gitment是依赖于github，还是相当的可信。 安装因为之前就选用了next主题，比较老。最新的next主题已经可以直接配置gitment评论插件了。 注册Application我们需要在github上给自己的博客新建一个oauth2.0的app，添加地址https://github.com/settings/applications/new。按照要求填写就行。Homepage URL和Authorization callback URL写博客主页就行。 添加代码然后在themes/next/layout/_partials/comments.swig中添加代码 123456789101112131415161718192021222324252627282930&#123;% elseif theme.gitment.enable %&#125; &lt;div id="container" class="gitment_container"&gt;&lt;/div&gt; &lt;link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"&gt; &lt;script src="https://imsun.github.io/gitment/dist/gitment.browser.js"&gt;&lt;/script&gt; &lt;script&gt; const myTheme = &#123; render(state, instance) &#123; const container = document.createElement('div'); container.lang = "en-US"; container.className = 'gitment-container gitment-root-container'; container.appendChild(instance.renderHeader(state, instance)); container.appendChild(instance.renderEditor(state, instance)); container.appendChild(instance.renderComments(state, instance)); container.appendChild(instance.renderFooter(state, instance)); return container; &#125; &#125; var gitment = new Gitment(&#123; id: window.location.pathname, theme: myTheme, owner: '&#123;&#123; theme.gitment.owner &#125;&#125;', repo: '&#123;&#123; theme.gitment.repo &#125;&#125;', oauth: &#123; client_id: '&#123;&#123; theme.gitment.client_id &#125;&#125;', client_secret: '&#123;&#123; theme.gitment.client_secret &#125;&#125;' &#125; &#125;); gitment.render('container'); &lt;/script&gt;&#123;% endif %&#125; _config.yml中添加对应配置 1234567# Gitment commentsgitment: enable: true owner: #你的github id repo: #存放评论的仓库，可以直接在前面owner账户新建一个，直接写仓库名称 client_id: #第一步中申请App后的clientId client_secret: #第一步中申请App后的client_secret 然后生成、发布就好了。 问题授权问题点击github登录并且授权后，返回页面提示报错：[object ProgressEvent] 。头像转圈，一直没有成功。 查看network，是其中的一个请求失败导致的。地址是：https://gh-oauth.imsun.net 有人给作者的git仓库提了issue，感兴趣的可以去看看。 好像是授权后需要通过code获取token。这步需要跨域，作者自己搭建的服务停了，上面的issue中提到了替换别人搭建的地址（可以自己去找个靠谱的试下）或者自己搭建跨域代理服务。作者给了代码。仓库地址 这个问题会发生在没在gitment中授权过得账号第一次授权的时候，如果已经授权过，不会出现这个问题。 作者的博客也存在这样的问题（需要一个没有授权过得账号进行测试） 针对上面这个问题呢 我还是决定放弃gitment。 我原本采用gitment的初衷就是希望稳定。但是gitment不仅依赖github，还需要第三方的服务。 既然仍然需要第三方服务，还是直接用评论系统来的方便。毕竟就算多说停了，还是会给通知，让切换的。其他个人搭建的服务就不一定会通知了。 附上作者博客文章地址 https://imsun.net/posts/gitment-introduction/]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>gitment</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[京东宙斯对接(一)]]></title>
    <url>%2F2018%2F12%2F11%2Fjd-jos-dev-1%2F</url>
    <content type="text"><![CDATA[最新家里做京东的朋友问我能不能做一个订单管理发货的系统。稍微聊了下，就是能拿到京东系统的订单列表，然后让供货商能打印订单的快递单进行发货。我想想觉得应该也不是很难，毕竟不是很多人用的大系统，而且他也说看着做一下（当然是不给钱的）我也就答应了。要求不高，顺便练练手吧。 因为需要拿到京东订单的信息。所以肯定要找京东要接口拿数据的。本来是准备全部弄好，完整的写一下对接过程的。但是因为遇到京东的订单数据接口必须要在京东云鼎服务器调用，我们合计了一下，现在店里订单少，可以用管易等OMS发货。可以等量大了再自己部署系统。所以我可以慢慢研究京东的接口。 不得不吐槽一下京东的接口： 文档极其简单-很多字段没有描述，入参必填字段，比如状态，没有备选项，你让我传什么呀？还有接口分类估计20+，没有搜索，一个下拉，找一个分类能把眼看花。 没有沙箱环境-直接拿生产数据开发（笑哭），之前看支付宝的接口就给了很好的沙箱环境。差距呀！！！ 部分接口必须云鼎调用-这点我真心觉得京东就是圈钱，让你买它的服务器，还说是为了安全。看了下，最低配（1核+4G+40G+1Mbps）最便宜160一个月（这也是我们决定先不用的原因，算下来订单量小，用不起来就不划算了） 所以一时半会儿应该是搞不完。那就慢慢弄，为了怕忘记了，先有一点记一点。 一、创建应用京东接口的SDK是不能直接下载的。需要先创建应用，申请接口，才能下载有权限接口的SDK。 然后尴尬的事情来了，创建应用的时候要求对系统功能进行截图，我没接口，没SDK，没数据我怎么开发功能？没功能，就没截图，就没办法申请应用。 不知道是不是我想多了，眼看就是死循环了。我找京东的客服，等了2天给我回了一个链接。关键我早就看过了，要是能看这个搞定，我问你干嘛？最后我直接问他原型的截图行不行？他说可以。那就好办了。随便截了几张图，把文档填了，创建了一个应用（因为用的商家账号，创建的是商家自研应用）。不到半天就显示审核通过了。这时候不得不再次吐槽一下，这个申请没这么麻烦就是不写清楚。 总的来说，创建应用的步骤，京东的文档还是介绍的很清楚，但是对于具体要求没有明确。所以要是想申请可以抱着试试看的态度，先提交。不过咱再改就是了。 申请接口有了应用，就可以申请接口，我是把能申请的都点了，想着我直接看介绍根本看不出来都是干啥的，我只能通过api调试，看下接口能拿回哪些数据，来猜测是什么接口。比如商品API和商品通API，毕竟我们做开发的不是专业营销管理的，看到这2个词我根本分不清有啥区别。因为需要商品列表数据，我把这2个分类下的都申请了。有部分是直接审核通过的，有些现在都还是审核中。 下载生成SDK其实这些接口很容易理解，就是一个http(s)请求，所谓的SDK就是把这些请求封装成java方法，方便开发。 我在找京东对接教程的时候，就看到有人把SDK自己重写了。还有网上对应的教程实在是太少了，要不就是京东之前还是360buy的时候的接口。 在应用的接口管理界面，点击下载SDK，会下载一个open-api-sdk-2.0.jar和open-api-sdk-2.0-sources.jar文件。我建议open-api-sdk-2.0-sources.jar里面的源码改造成一个项目（pom文件在open-api-sdk-2.0.jar里面），这样可以直接安装到本地仓库或者其他私有仓库。当然可以直接把open-api-sdk-2.0.jar安装到仓库中，但是这样pom文件里面的依赖就读不出来。貌似网上有人吐槽过这个事情。 后面就可以直接进行开发了。提一下京东现在有些接口只能在他们的云鼎中调用。比如订单相关，就是说要买他们的服务器才行。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>京东</tag>
        <tag>对接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oracle查询not in的子查询结果存在null的时候查询不出结果]]></title>
    <url>%2F2018%2F12%2F07%2Foracle-not-in-null%2F</url>
    <content type="text"><![CDATA[问题：明明子查询查询不到的数据，使用not in后竟然查不出来。 原因：子查询的结果集还包含其他有null的值。 处理：使用exists或者子查询过滤null值]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决plsql中文乱码问题]]></title>
    <url>%2F2018%2F11%2F26%2Fplsql-garble%2F</url>
    <content type="text"><![CDATA[步骤一：在plsql中执行 select userenv(‘language’) from dual; 语句来查看字符集。 步骤二：在环境变量中添加配置信息，名称为NLS_LANG，值为步骤一中的结果。]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>PL SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有道云笔记隐藏ad控件]]></title>
    <url>%2F2018%2F09%2F12%2Fyoudao-note-no-ad%2F</url>
    <content type="text"><![CDATA[现在有道云笔记6.XX版本已不能通过删除panelad解决问题，只能修改panelad的属性来实现隐藏ad控件。 具体的方法如下： 将安装目录下Youdao\YoudaoNote\theme文件夹下的build.xml文件复制到桌面并打开。 删除PanelAd标签ass属性里的 panelclient 将AdWraperMid标签的bounds值修改为0，0，0，0 保存文件，再将build.xml复制回原来的文件夹，替换原来的文件]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>有道云笔记</tag>
        <tag>去广告</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[突破超星限制 手动下载书籍]]></title>
    <url>%2F2018%2F08%2F15%2Fchaoxing-download%2F</url>
    <content type="text"><![CDATA[原由偶然看到edu邮箱可以申请idea的免费授权，购买苹果设备也能有优惠。就想着看看学校的邮箱还能不能进去。尝试了很多次，都是提示密码错误。百度找回密码的方法，提示学校有内网的平台。为了进入学校内网，我登上了学校的图书馆，找到之前用于连接学校图书馆数据库的VPN。发现我的账号还可以用。但是试了下，登录内网平台，提示我已离校。遂放弃，就顺便逛了逛学校的文章数据库，点开了超星图书。突发奇想，我既然可以在浏览器看，那么就可以把书籍下载下了才对。 超星对于网页版有限制，只能打印最多5页。想通过虚拟打印机转pdf的方式是行不通的。 方法分析打开一本书籍进行网页阅读。在阅读器界面进入开发者选项。观察network面板。以此查看都请求了哪些资源。就可以发现其中有图书每页的扫描图片版。 一共有2个请求，第一个请求的返回码是302。所以其实过程应该是第一个请求被重定向到第二个地址了。可以看到第二个地址就是图片的真实地址。 1http://img.sslibrary.com/n/37145edc647abce0ee08822ec8fabcb1MC208449122774/img0/74EE5C55A4DCB6229C5CC62EADF71C29B600D91D03F6ED0C0A5C9E842B735DA342E4CD1FEBC7D7253CD861C66F10EC3114DB8AB23C9163C72D3CA84267DD441F5CCF24903228F96C91D686A7D86AB07B2E571E0D3188930EA17B54E1623676BA4D96DBA63EF5D3E3E05BA13F2E764150B244/bf1/qw/12871863/E445DC23100B43138BEF667FC0EAA683/000001?zoom=0&amp;_t=1803553745 1http://bpng1.5read.com/image/ss2jpg.dll?did=bf1&amp;pid=74EE5C55A4DCB6229C5CC62EADF71C29B600D91D03F6ED0C0A5C9E842B735DA342E4CD1FEBC7D7253CD861C66F10EC3114DB8AB23C9163C72D3CA84267DD441F5CCF24903228F96C91D686A7D86AB07B2E571E0D3188930EA17B54E1623676BA4D96DBA63EF5D3E3E05BA13F2E764150B244E445DC23100B43138BEF667FC0EAA683&amp;jid=/000001.jpg&amp;a=9A4D589488C2828890BACEA3D05652B34680860BD3CFFFF601782BEAD167E03B39004AA821925A769F67918742F5F57B854D4FA1CD926C6A5BDEDE913140362716E9&amp;zoom=0&amp;f=0 换到下一页，查看地址的规律，可以发现地址主要的不同就是在于最后面的000001和000002。（参数_t猜测是随机数，经测试确实不影响实际效果，zoom参数为清晰度，后面具体介绍） 1http://img.sslibrary.com/n/37145edc647abce0ee08822ec8fabcb1MC208449122774/img0/74EE5C55A4DCB6229C5CC62EADF71C29B600D91D03F6ED0C0A5C9E842B735DA342E4CD1FEBC7D7253CD861C66F10EC3114DB8AB23C9163C72D3CA84267DD441F5CCF24903228F96C91D686A7D86AB07B2E571E0D3188930EA17B54E1623676BA4D96DBA63EF5D3E3E05BA13F2E764150B244/bf1/qw/12871863/E445DC23100B43138BEF667FC0EAA683/000002?zoom=0&amp;_t=520730457 1http://bpng1.5read.com/image/ss2jpg.dll?did=bf1&amp;pid=74EE5C55A4DCB6229C5CC62EADF71C29B600D91D03F6ED0C0A5C9E842B735DA342E4CD1FEBC7D7253CD861C66F10EC3114DB8AB23C9163C72D3CA84267DD441F5CCF24903228F96C91D686A7D86AB07B2E571E0D3188930EA17B54E1623676BA4D96DBA63EF5D3E3E05BA13F2E764150B244E445DC23100B43138BEF667FC0EAA683&amp;jid=/000002.jpg&amp;a=F7A988B01265C9FDC22C0F37B335548C840C7718FD74F9274B329D2E6798572CC25958CE21A89B41F9F94AA1CF473C635BC444A631BFFA6C246CD03E925941149923&amp;zoom=0&amp;f=0 虽然请求会被重定向到图片的真是地址，但是发现真是地址没有很好的规律，尝试更改图片名称（000001.jpg改成000002.jpg）并不能成功访问，从地址对比也能看到，还有其他参数不一样。所以就直接使用第一个地址进行抓取。让软件自己重定向。 抓取图片好了，现在已经知道图片的地址规律，可以写代码将整本书的所有页面都下载下了，然后使用 Adobe Acrobat 进行合并成pdf。 虽然我是java开发，但是这种抓取资源的工作还是python比较合适。 12345678910import urllib.parseimport urllib.requestfor num in range(1,602): url = 'http://img.sslibrary.com/n/37145edc647abce0ee08822ec8fabcb1MC208449122774/img0/74EE5C55A4DCB6229C5CC62EADF71C29B600D91D03F6ED0C0A5C9E842B735DA342E4CD1FEBC7D7253CD861C66F10EC3114DB8AB23C9163C72D3CA84267DD441F5CCF24903228F96C91D686A7D86AB07B2E571E0D3188930EA17B54E1623676BA4D96DBA63EF5D3E3E05BA13F2E764150B244/bf1/qw/12871863/E445DC23100B43138BEF667FC0EAA683/000'+ ('%03d' % num)+'?zoom=2' print(url) response = urllib.request.urlopen(url) with open('hadoop/000'+('%03d' % num)+".png", "wb") as code: code.write(response.read()) 关于上面的代码，有2点：1、num的范围是1-601，所以是range(1,602)，这个应该算是python的语法，一开始写的是601，最后一页没有下载。2、url最后的参数zoom=2是指定分辨率的，一共有三个0,1,2。越大越清晰。这也是因为一开始下载的图片发现看不清楚，在网页阅读器上点击放大，发现该参数会发生变化。 关于python下载，爬取数据网上有很多教程。我也是随便找的一段代码改的。 最后，在指定的下文件夹下就有所有图片了，当然这只是正文部分，需要前言和目录页的话，也是相同的方式进行下载。这里使用 Adobe Acrobat 进行合并成pdf。 总结其实整个流程就是分析规律，写代码按照规律下载。将代码伪装成浏览器一样去访问资源。然后整理下载的图片。因为我不是要把人家的所有书都抓下来，就没有去想怎么把这一整个流程都用代码实现了。 最后之后查看其他书籍发现，还有另外一种阅读方式-pdf阅读。其实就是每一页都是pdf而不是图片。这样的话，规律更明显。而且封面和目录什么的都是一样的规律，一次性可以下全部页面。 同样的也是请求第一个地址被重定向到真是地址。所以直接对第一个地址进行请求下载就可以了。 下载代码： 123456789101112import urllib.parseimport urllib.requestimport random;for num in range(1,290): url = 'http://117.122.222.247:8080/download/getFile?fileMark=13807305&amp;userMark=&amp;pages=289&amp;time=1532069788114&amp;enc=fc99eccfce66d3ef1778057715119009&amp;code=e4ea8c3928aa2dbcd2b6ee37fd1164d0&amp;cpage='+ ('%d' % num) + '&amp;random='+('%f' % random.random()) print(url) response = urllib.request.urlopen(url) with open('oracle/'+('%03d' % num)+".pdf", "wb") as code: code.write(response.read()) code.close() 关于代码：1、最后面加的random随机数，是因为连着访问，报一个python错误，大概意思就是连着访问端口冲突，之后加上这个就没再出现。有人知道原因可以交流一下。 下载完成后还是使用 Adobe Acrobat 进行合并成一个pdf。 哦，对了，希望超星的人不要看到这篇文章。]]></content>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring中类内部调用注解@Transaction方法事务失效问题]]></title>
    <url>%2F2018%2F06%2F26%2Fspring-aop-self-transaction%2F</url>
    <content type="text"><![CDATA[写在前面在最近的工作用dubbo修改发布restful协议的时候，遇到一个问题，dubbo内部写的是service，控制事务的时候，直接写了一个方法B，把A方法需要事务的内容放在里面。类似下面代码的方式进行调用，结果是事务无效。 12345678910111213141516171819202122@Service("testService")public TestServiceImpl implments TestService&#123; /** * 对外的接口方法 */ public String A()&#123; ... this.B(); ... &#125; @Transactional private String B()&#123; ... ... &#125;&#125; 原因查找一下资料和别人的经历，了解到，spring的aop事务是通过代理实现的，而上面的代码A方法中直接调用B方法是内部直接调用。不会触发spring的代理机制，而是直接调用。所以事务无效。 解决方法1.直接注入法想到既然直接调用没有效果，那么像注入Dao一样，将Service自己注入到自己里面，在通过引用进行调用不就好了。 示例代码如下。 12345678910111213141516171819202122232425@Service("testService")public TestServiceImpl implments TestService&#123; @Autowired private TestService testService; /** * 对外的接口方法 */ public String A()&#123; ... testService.B(); ... &#125; @Transactional private String B()&#123; ... ... &#125;&#125; 实测这样的方式，事务是有效的。但是也会引起其他的一些问题（目前我的项目里面没有出现，网上有相关的讨论）。问题就是，这样的代码会造成对象引用的无限递归。据说在springboot中会出问题。 2. 工具获取法还有就是使用SpringUtil等工具动态获取self对象后调用方法。 12345678910111213141516171819202122@Service("testService")public TestServiceImpl implments TestService&#123; /** * 对外的接口方法 */ public String A()&#123; ... TestService testService = SpringUtil.getBean("testService", TestService.class); testService.B(); ... &#125; @Transactional private String B()&#123; ... ... &#125;&#125; 最后其实应该尽量避免这种方式的事务模式。实在没办法，还是建议使用第二种方式处理。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Transaction</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 搭建WebService服务端]]></title>
    <url>%2F2018%2F06%2F14%2Fjava-webservice-server%2F</url>
    <content type="text"><![CDATA[写在前面之前在工作中遇到了和其他公司系统对接问题，对方提供的WebService接口，通过对接工作对WebService有了一定的了解。 现在公司也有微服务项目，主要使用的是dubbo，并定制化的加入了restful协议（详见当当网开源的dubbox）。WebService主要还是在一些老项目中使用，最近在进行一个老项目的重构改造工作，其中给其他项目提供的WebService接口要一并重写。要求呢，调用方直接修改接口地址即可。 Java 开发WebService服务端xfire查看项目老代码，老代码使用的是xfire搭建的WebService服务。基于要和原有服务保持一致的想法，准备使用xfire。 在项目中加入xfire依赖和相应配置，启动一直报错。百度发现，是因为xfire已经很久没更新，当时的spring 是2.x ，现在我们使用的spring是4.x。等于说这2个不兼容。遂决定放弃，另求他法。因此xfire方式就不细写了。有兴趣百度教程有很多。 cxfcxf 是Apache的项目，相比于xfire来说是一直在更新的，网上教程也很多。我主要借鉴的是https://blog.csdn.net/khsay/article/details/78054741。因为我是在原有项目中搭建的。文中只提取了WebService部分，可能会有错误。有问题可以与我讨论，或者查看我借鉴的这篇文章。 项目添加依赖我们项目用的是gradle作为构建工具 123compile group: 'org.apache.cxf', name: 'cxf-rt-frontend-jaxws', version: '3.2.4'compile group: 'org.apache.cxf', name: 'cxf-rt-transports-http', version: '3.2.4'compile group: 'org.apache.cxf', name: 'cxf-rt-ws-security', version: '3.2.4' 创建接口和实现类接口类 123456789101112package io.github.loanon.webservice.api;import javax.jws.WebMethod;import javax.jws.WebService;@WebServicepublic interface DemoService &#123; @WebMethod String callService(String xmlStr);&#125; 实现类 12345678910111213141516package io.github.loanon.webservice.api.impl;import javax.jws.WebService;import org.springframework.stereotype.Service;import io.github.loanon.webservice.api.DemoService@Service("demoService")@WebService(targetNamespace = "https://services.webServices.loanon.github.io", serviceName = "demoService")public class DemoServiceImpl implements DemoService &#123; @Override public String callService(String xmlStr) &#123; //TODO your code return ""; &#125;&#125; XML配置添加spring-cxf.xml并在spring的applicationContext.xml中引入 applicationContext.xml 12&lt;!-- webService --&gt;&lt;import resource="classpath:spring-config/spring.cxf.xml"/&gt; spring-cxf.xml 123456789101112131415161718192021&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://cxf.apache.org/core" xmlns:jaxws="http://cxf.apache.org/jaxws" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd"&gt; &lt;!--发布服务--&gt; &lt;jaxws:endpoint id="DemoService" implementor="io.github.loanon.webservice.api.impl.DemoServiceImpl" address="/demoService"&gt; &lt;/jaxws:endpoint&gt; &lt;cxf:bus&gt; &lt;cxf:features&gt; &lt;cxf:logging/&gt; &lt;/cxf:features&gt; &lt;/cxf:bus&gt;&lt;/beans&gt; 在web.xml中加入cxf的Servlet。 123456789&lt;!--cxf --&gt;&lt;servlet&gt; &lt;servlet-name&gt;cxf&lt;/servlet-name&gt; &lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;cxf&lt;/servlet-name&gt; &lt;url-pattern&gt;/ws/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 验证浏览器访问123456789101112131415161718# 写在最后前面说到要保持和原有项目平滑过渡。就是说对于调用方只需要改一下地址，不用改代码就可以直接调用新服务。所以尽量和原有服务在协议上保持一致，目前看到的时候请求报文中会有方法名，所以只将方法名保持一致。当然这个有待测试。只有等联调结果，才能确定。soapUI 中WebService的请求报文。```xml&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:api=&quot;http://api.webservice.loanon.github.io/&quot;&gt; &lt;soapenv:Header/&gt; &lt;soapenv:Body&gt; &lt;!-- 这个节点有方法名信息 --&gt; &lt;api:callService&gt; &lt;!--Optional:--&gt; &lt;arg0&gt;?&lt;/arg0&gt; &lt;/api:callService&gt; &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信、支付宝付款码二合一(二)]]></title>
    <url>%2F2018%2F06%2F12%2Falipay-and-wechatpay-2%2F</url>
    <content type="text"><![CDATA[写在前面接前面一篇，上篇最后说到的微信不能识别是因为没有域名，其实是不对的。其实是因为微信扫码支付和支付宝扫码支付不一样，不是一个http请求。是“wxp”开头的。 为此特意找到之前看到的那篇文章（已经找不到链接了，好像是少数派上面的，有兴趣可以找找看，搜关键字二维码）。 我的方案通过分别用微信和支付宝扫文章中合成之后的付款码发现，他们的二维码在微信中就不是直接打开支付界面，而是打开带有微信付款码的页面，通过长按识别二维码进行付款。 所以对上篇中html进行改造，并将页面和二维码图片放到本博客的GitHub仓库下，通过GitHub的页面进行访问，这样微信也是可以打开的。 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;支付宝-微信扫码支付&lt;/title&gt; &lt;meta charset="UTF-8"/&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id="message"&gt;&lt;/h1&gt;&lt;div id="wechatPay" style="text-align: center; padding-top: 50px;"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt;function isAlipayOrWechat() &#123; var userAgent = navigator.userAgent.toLowerCase(); if(userAgent.indexOf("alipay") != -1) &#123; window.location.href="HTTPS://QR.ALIPAY.COM/FKX00483JOOAAMITN2W2C1"; &#125; else if(userAgent.indexOf("micromessenger") != -1) &#123; document.getElementById('wechatPay').innerHTML='&lt;img style="width:80%;" src="./wechatPay.svg"&gt;&lt;h1 id="message"&gt;长按识别二维码向我付款&lt;/h1&gt;'; &#125;else&#123; document.getElementById('message').innerHTML="请使用支付宝或者微信扫码"; &#125;&#125;isAlipayOrWechat();&lt;/script&gt;&lt;/html&gt; 看看效果吧！ 写在最后而且我参考的那篇文章中，也有很多人提到，通过第三方平台进行这样的合成存在安全问题。如果自己写的并放在自己的GitHub仓库中，至少不会被别人偷偷修改掉链接地址。 当然，也许是我考虑的不周全，有建议也希望能向我提出来。]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>支付宝</tag>
        <tag>微信</tag>
        <tag>扫码支付</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信、支付宝付款码二合一]]></title>
    <url>%2F2018%2F05%2F14%2Falipay-and-wechatpay%2F</url>
    <content type="text"><![CDATA[写在前面前段时间，看到有网站可以将微信和支付宝的付款码合并成一个，觉得很有意思，但是在我准备尝试的时候发现是收费的。 作为一个天天付钱不收钱的，这就没有必要了。其实之前在店里面扫码付钱的时候好像就见过这样的付款码。 今天突发奇想，作为一个码农，自己就可以写一个呀。 思路二合一无非就是微信或者支付宝扫码打开的都是同一个服务请求。服务器接收到请求的时候根据如request中的useragent进行判断。根据判断结果将请求重定向到对应app的地址。 过程这样分析之后我们就需要知道支付宝和微信的useragent都是什么。通过网上查询知道支付宝的useragent中有Alipay，微信的useragent中有micromessenger。 然后就自己动手，在之前搭建的一个web项目中新增加一个方法。 代码完成之后在浏览器访问发现没有反应。将请求地址（局域网地址）生成为二维码。使用手机（与电脑在同一局域网）支付宝扫码测试发现可以打开，微信扫码会提示不是域名访问。处于安全考虑不允许打开。 这么看方法应该是对的，可惜没有买域名和vps，这个也是能自己这么玩玩了。 之后因为微信要是进行服务端重定向需要域名才行，只能到此为止了。 之后突然想到，也可以通过js进行前端的判断，之后通过window.location.href进行“重定向”。 123456789101112131415161718192021&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"/&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id="message"&gt;&lt;/h1&gt;&lt;/body&gt;&lt;script&gt;function isAlipayOrWechat() &#123; var userAgent = navigator.userAgent.toLowerCase(); if(userAgent.indexOf("alipay") != -1) &#123; window.location.href="HTTPS://QR.ALIPAY.COM/FKX00483JOOAAMITN2W2C1"; &#125; else if(userAgent.indexOf("micromessenger") != -1) &#123; window.location.href="wxp://f2f0fHq8R3hDDhWV4a6sKZrb5_EF0CGMljOP"; &#125;else&#123; document.getElementById('message').innerHTML="请使用支付宝或者微信扫码"; &#125;&#125;isAlipayOrWechat();&lt;/script&gt;&lt;/html&gt; 用nginx在局域网测试发现支付宝是可以成功的。微信前面说了有限制，也就没有尝试了 这样只要一个html就可以，比如可以把这个html放到这个博客里面，这样不就不需要买域名和vps了。 可是当我把文件放到博客之后，还是支付宝可以成功。微信扫码打开就只是一个空白页。看来微信做了限制，不允许通过window.location.href来指定页面请求。 最后目前这个功能也就这样了，后面有机会买了vps和域名，再试试吧，先记一下。]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>支付宝</tag>
        <tag>微信</tag>
        <tag>扫码支付</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PowerDesigner笔记]]></title>
    <url>%2F2018%2F05%2F14%2Fpowerdesigner-note%2F</url>
    <content type="text"><![CDATA[使用PowerDesigner逆向工程今天准备把之前做的一个小项目的数据模型整理一下，就想到了用PowerDesigner。安装完成之后，连接数据库，测试连接,提示报错。主要遇到2个错误，记一下解决方法。 1. Could not Initialize JavaVM!百度看到有人说是用了64位的jdk，才想到安装的PowerDesigner 16.5是32位的。查看解决办法就是使用32位的jdk。我猜想如果PowerDesigner是64位的话，使用64位jdk也应该没问题，下次有机会试一下。 2. Non SQL Error : Could not load class com.mysql.jdbc.Driver这个问题，以前第一次使用这个功能就遇到过，是找不到MySQL的jdbc驱动，只要将驱动jar的路径加入到系统的环境变量classpath就好了。 总结因为已经安装jdk，再次安装新的jdk会让系统的配置比较乱，特别是环境变量已经配置好的情况下，为了使用PowerDesigner修改环境变量总是觉得不太好。在网上找到个人比较喜欢的方法。 在PowerDesigner的安装目录中新建一个bat文件，写入如下脚本，具体路径根据个人电脑配置决定。 123Set JAVA_HOME=D:\Software\Java_x86\jdk1.8.0_144Set CLASSPATH=C:\Users\DinGZG\.m2\repository\mysql\mysql-connector-java\5.1.40\mysql-connector-java-5.1.40.jarpdshell16.exe 需要使用连接数据库的时候就通过脚本启动软件即可。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>PowerDesigner</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java强转null问题]]></title>
    <url>%2F2018%2F04%2F09%2Fjava-null-convert%2F</url>
    <content type="text"><![CDATA[可以强转为引用类型 不能强转成基本类型 因为转成基本类型会调用引用类型自动拆箱的方法，会引起空指针异常（NullPointException）]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>null</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo 使用技巧]]></title>
    <url>%2F2017%2F11%2F26%2Fhexo-skill%2F</url>
    <content type="text"><![CDATA[本博客是用hexo搭建在GitHub上的，写这篇文章只是为了记录一下hexo使用的一些命令和技巧，因为不是天天写博客（实在没那么高产），一段时间hexo命令就有些不记得了，记录一下备用。 1.新建博文 1hexo new 2.清除缓存 1hexo clean 3.生成文档 1hexo g //hexo generate 4.本地起服务预览 1hexo s //hexo server 5.发布到GitHub 1hexo d //hexo deploy 其他命令： hexo new page”pageName” #新建页面 hexo help # 查看帮助 hexo version #查看Hexo的版本 技巧： 1.部署时保证README.md文件不被渲染 _config.yml中配置一下”skip_render”选项 1skip_render: README.md]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用gradle给旧项目打包]]></title>
    <url>%2F2017%2F11%2F26%2Fgradle-build-old-project%2F</url>
    <content type="text"><![CDATA[下载gradle并配置环境变量完成后在命令行输入gradle -v，查看是否配置正确。 建立配置文件在项目根目录新建名为build.gradle的配置文件。 文件中写入如下配置： 123456789101112131415161718192021222324252627282930313233343536apply plugin: 'war'// 设置 JDK 版本sourceCompatibility = 1.6// 设置 WebApp 根目录webAppDirName = 'WebRoot'// 设置 Java 源码所在目录sourceSets &#123; main &#123; java&#123; // 多个目录 srcDirs 单个用 srcDir '' srcDirs = ['soo','src/main/java','coresrc/main/java'] &#125; resources&#123; // 多个目录 srcDirs 单个用 srcDir '' srcDirs = ['src/main/resources','coresrc/main/resources'] &#125; &#125;&#125;// 设置 maven 库地址repositories &#123; maven &#123;url "http://maven.aliyun.com/nexus/content/groups/public/"&#125; mavenLocal()&#125;dependencies &#123; tasks.withType(JavaCompile) &#123; options.encoding = "GBK" &#125; // 本地依赖 compileOnly files('F:/lib/weblogic.jar','F:/lib/ojdbc14.jar') // 有网络是用maven // providedCompile 'javax.servlet:servlet-api:2.5' // 编译期 compile fileTree(dir: 'WebRoot/WEB-INF/lib', include: ['*.jar'])&#125; 因为我的项目有多个java源文件目录和资源目录所以配置的是srcDirs。如果只有一个目录，配置srcDir即可。至于每个配置项什么含义就需要自己找资料了，基本实现打包功能不需要很多的配置，像srcDir就是配置一下java源代码位置就好了。 编译打包在项目根目录打开命令行窗口，输入指令gradle clean build。如果成功会在结束时出现BUILD SUCCESSFUL。如果没有请查看报错信息，针对性的修改build.gradle里面的配置。 打包完成的war包就在 ./build/libs/目录下。 扩展上面说的都是自己用的，那么要是团队都来使用gradle，该如何统一。 假如现在项目组的同事也想和我一样使用gradle打包，直接的做法就是我将build.gradle提交svn，大家更新下来，安装gradle后，更改自己的本地依赖位置（其实既然使用了gradle，依赖可以都放到maven私有仓库，这样大家可以共用一套配置）。运行gradle clean build即可打包。 按照上面的做法，其实gradle和maven除了配置文件不同，基本没啥区别了。其实gradle提供了另一套便于统一协作的机制-gradlew（后来发现maven好像也有类似的功能，是我肤浅了）。使用gradlew需要在项目根目录执行gradle init命令。会生成wapper的配置文件。可以将这些文件一同提交svn，其他同事更新后无需安装gradle，直接执行gradlew clean build。gradle会查找本地的gradle环境，没有的话会根据wapper配置去互联网下载对应版本的gradle进行编译打包。省去自行下载配置环境，还可以保持大家gradle版本的统一。 当然了，国内特殊原因，以及每个开发者所处的网络环境不同，下载速度也会受影响。上面的做法不一定能行的通，如果条件不允许，还是自己手动下载gradle并进行配置。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记PLSQL Developer设置oralce instantclient 进行远程连接经历]]></title>
    <url>%2F2017%2F11%2F10%2Fplsql-oracle%2F</url>
    <content type="text"><![CDATA[相关软件： PLSQL Developer 12(64bit) oracle instantclient-basic-windows.x64-12.2.0.1.0 都可以去对应的官网上下载。 按照网络上博客的教程解压 instantclient-basic-windows.x64-12.2.0.1.0.zip 并配置相应的环境变量以及PLSQL设置，发现 PLSQL Developer 没有远程数据库的配置。并且直接点击连接会提示没有正确安装 oracle 客户端。 搜索类似问题，有博客提到 instantclient12_2 需要 vs2013 运行库支持，让我想起来oracle的下载页面确实有相关提示。下载运行库进行安装，还是没有远程数据库的配置，但是直接点击连接会报oracle的连接错误。这说明现在客户端已经安装正确。应该是相关配置有问题。 重新检查环境变量配置，发现TNS_ADMIN配置错了，重新配置，指定到tnsnames.ora所在目录。测试发现只要该目录下有tnsnames.ora文件即可，不一定非要network/admin目录。但是保险起见，还是设置成network/admin目录。并在该目录下放置tnsnames.ora文件，文件中配置自己的数据库地址信息。 重新打开PLSQL，可以正常连接oracle数据库了。]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>PL SQL</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小米6手机升级 MIUI9 小记]]></title>
    <url>%2F2017%2F08%2F21%2Fxiaomi6-miui9%2F</url>
    <content type="text"><![CDATA[同事买了小米6，最近小米也一直在宣传新系统 MIUI9 ，刚好看到可以下载就下载来刷机了。 刷机前还特意备份了一下数据，之前我也用过小米，刷机也一直都是这样备份系统，刷好了再恢复回来。 不过今天出问题了，同事刷完机，开机准备恢复数据，发现备份没有了，找遍了文件管理，发现所有的文件都没有了。看来是被格式化了。 上网查了一下，还真的是格式化了。原来是 跨版本刷机属于降级操作会自动清空手机里所有数据 。所有的地方都是提示要备份，但是就是没有提示要备份到手机之外，这个有点坑爹啊。 看来下次有什么刷机，重装啥的，还是要用电脑进行备份。]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>MI6</tag>
        <tag>MIUI9</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 调用第三方 webservice 服务]]></title>
    <url>%2F2017%2F08%2F18%2Fjava-webservice%2F</url>
    <content type="text"><![CDATA[原由公司要求我们的系统要和第三方系统同步数据。跟第三方沟通之后发现对方提供的是 webservice 接口，作为没有接触过 webservice 的小白，表示有点慌。 下面是请求接口 “http://www.xxxx.com/webservice/service/baseInfo?wsdl&quot; 的 XML 结果。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;wsdl:definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://webservice.baseInfo.webservice.xxxx.com/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" name="BaseInfoWebServiceImplService" targetNamespace="http://webservice.baseInfo.webservice.xxxx.com/"&gt; &lt;wsdl:types&gt; &lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://webservice.baseInfo.webservice.xxxx.com/" elementFormDefault="unqualified" targetNamespace="http://webservice.baseInfo.webservice.xxxx.com/" version="1.0"&gt; &lt;xs:element name="getOrgListByCode" type="tns:getOrgListByCode"/&gt; &lt;xs:element name="getOrgListByCodeResponse" type="tns:getOrgListByCodeResponse"/&gt; &lt;xs:element name="getOrgListByTime" type="tns:getOrgListByTime"/&gt; &lt;xs:element name="getOrgListByTimeResponse" type="tns:getOrgListByTimeResponse"/&gt; &lt;xs:element name="getUserListByTime" type="tns:getUserListByTime"/&gt; &lt;xs:element name="getUserListByTimeResponse" type="tns:getUserListByTimeResponse"/&gt; &lt;xs:complexType name="getOrgListByCode"&gt; &lt;xs:sequence&gt; &lt;xs:element minOccurs="0" name="arg0" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg1" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg2" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg3" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg4" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg5" type="xs:string"/&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;xs:complexType name="getOrgListByCodeResponse"&gt; &lt;xs:sequence&gt; &lt;xs:element minOccurs="0" name="return" type="xs:string"/&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;xs:complexType name="getUserListByTime"&gt; &lt;xs:sequence&gt; &lt;xs:element minOccurs="0" name="arg0" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg1" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg2" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg3" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg4" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg5" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg6" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg7" type="xs:string"/&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;xs:complexType name="getUserListByTimeResponse"&gt; &lt;xs:sequence&gt; &lt;xs:element minOccurs="0" name="return" type="xs:string"/&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;xs:complexType name="getOrgListByTime"&gt; &lt;xs:sequence&gt; &lt;xs:element minOccurs="0" name="arg0" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg1" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg2" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg3" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg4" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg5" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg6" type="xs:string"/&gt; &lt;xs:element minOccurs="0" name="arg7" type="xs:string"/&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;xs:complexType name="getOrgListByTimeResponse"&gt; &lt;xs:sequence&gt; &lt;xs:element minOccurs="0" name="return" type="xs:string"/&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;/xs:schema&gt; &lt;/wsdl:types&gt; &lt;wsdl:message name="getOrgListByTime"&gt; &lt;wsdl:part element="tns:getOrgListByTime" name="parameters"/&gt; &lt;/wsdl:message&gt; &lt;wsdl:message name="getOrgListByCodeResponse"&gt; &lt;wsdl:part element="tns:getOrgListByCodeResponse" name="parameters"/&gt; &lt;/wsdl:message&gt; &lt;wsdl:message name="getOrgListByCode"&gt; &lt;wsdl:part element="tns:getOrgListByCode" name="parameters"/&gt; &lt;/wsdl:message&gt; &lt;wsdl:message name="getUserListByTimeResponse"&gt; &lt;wsdl:part element="tns:getUserListByTimeResponse" name="parameters"/&gt; &lt;/wsdl:message&gt; &lt;wsdl:message name="getUserListByTime"&gt; &lt;wsdl:part element="tns:getUserListByTime" name="parameters"/&gt; &lt;/wsdl:message&gt; &lt;wsdl:message name="getOrgListByTimeResponse"&gt; &lt;wsdl:part element="tns:getOrgListByTimeResponse" name="parameters"/&gt; &lt;/wsdl:message&gt; &lt;wsdl:portType name="BaseInfoWebService"&gt; &lt;wsdl:operation name="getOrgListByCode"&gt; &lt;wsdl:input message="tns:getOrgListByCode" name="getOrgListByCode"/&gt; &lt;wsdl:output message="tns:getOrgListByCodeResponse" name="getOrgListByCodeResponse"/&gt; &lt;/wsdl:operation&gt; &lt;wsdl:operation name="getUserListByTime"&gt; &lt;wsdl:input message="tns:getUserListByTime" name="getUserListByTime"/&gt; &lt;wsdl:output message="tns:getUserListByTimeResponse" name="getUserListByTimeResponse"/&gt; &lt;/wsdl:operation&gt; &lt;wsdl:operation name="getOrgListByTime"&gt; &lt;wsdl:input message="tns:getOrgListByTime" name="getOrgListByTime"/&gt; &lt;wsdl:output message="tns:getOrgListByTimeResponse" name="getOrgListByTimeResponse"/&gt; &lt;/wsdl:operation&gt; &lt;/wsdl:portType&gt; &lt;wsdl:binding name="BaseInfoWebServiceImplServiceSoapBinding" type="tns:BaseInfoWebService"&gt; &lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt; &lt;wsdl:operation name="getOrgListByCode"&gt; &lt;soap:operation soapAction="" style="document"/&gt; &lt;wsdl:input name="getOrgListByCode"&gt; &lt;soap:body use="literal"/&gt; &lt;/wsdl:input&gt; &lt;wsdl:output name="getOrgListByCodeResponse"&gt; &lt;soap:body use="literal"/&gt; &lt;/wsdl:output&gt; &lt;/wsdl:operation&gt; &lt;wsdl:operation name="getUserListByTime"&gt; &lt;soap:operation soapAction="" style="document"/&gt; &lt;wsdl:input name="getUserListByTime"&gt; &lt;soap:body use="literal"/&gt; &lt;/wsdl:input&gt; &lt;wsdl:output name="getUserListByTimeResponse"&gt; &lt;soap:body use="literal"/&gt; &lt;/wsdl:output&gt; &lt;/wsdl:operation&gt; &lt;wsdl:operation name="getOrgListByTime"&gt; &lt;soap:operation soapAction="" style="document"/&gt; &lt;wsdl:input name="getOrgListByTime"&gt; &lt;soap:body use="literal"/&gt; &lt;/wsdl:input&gt; &lt;wsdl:output name="getOrgListByTimeResponse"&gt; &lt;soap:body use="literal"/&gt; &lt;/wsdl:output&gt; &lt;/wsdl:operation&gt; &lt;/wsdl:binding&gt; &lt;wsdl:service name="BaseInfoWebServiceImplService"&gt; &lt;wsdl:port binding="tns:BaseInfoWebServiceImplServiceSoapBinding" name="BaseInfoWebServiceImplPort"&gt; &lt;soap:address location="http://www.xxxx.com/webservice/services/baseInfo"/&gt; &lt;/wsdl:port&gt; &lt;/wsdl:service&gt;&lt;/wsdl:definitions&gt; 注：因为涉及客户的具体信息，接口以及 XML 中 location、schema 等地址是假的。 过程axis2遇到不会的东西当然是上网搜索找资料了，找了一个博客看了一下，使用 axis2 开发 webservice 客户端代码，但是当我按照博客的教程引入了依赖写好 demo 代码测试，一直报错。这个方法没成功，也没详细了解，就不赘述了。因为搜索的时候看到还有别的方式，所以还是继续找资料。 wsimport这次是用 Java 自带的 wsimport 工具分析 webservice 来生成代码，将 webservice 转化成 Java 服务来直接调用。 wsimport.exe 文件在 JDK 的 bin 目录下，可以在这个目录下直接启动命令行，输入命令 1wsimport -keep -p com.loanon.client.wsimport http://www.xxxx.com/webservice/service/baseInfo?wsdl 就会在 bin 目录下按照包名路径生成代码。 这里简单说一下 wsimport 的参数 12-keep //在生成class文件，或者jar包时，同时保留java源文件-p &lt;pkg&gt; //指定生成文件的包结构 所以上面的文件夹里面会有 .java 和 .class 两种文件。有了这些文件可以直接将 class 文件打成 jar 包作为依赖引入到项目中。也可以把 .java 源码放到项目中。我选择的是第二种。 我先写了一个单机的 demo 进行测试。其实第一次看到这些生成的代码是不知所措的，网上找到了的博客中，别人的描述和我生成的代码根本不一样，可以说没有联系。也许是 Java 版本的原因，也许是 webservice 接口差异的原因。看别人写的 main 方法中调用代码的方式在我的代码中没有办法做到。于是就点开源码挨个查看。终于有点头绪。 HttpConnection实在没办法了。按道理来说使用wsimport工具已经是最简单的方法了，而且写的demo可以运行，但是放到公司项目中就报错（Expection 报的是 XML Namespace 之类的，具体原因我没有去找，要是有类似问题知道原因 可以告知讨论一下）。 不过现在我已经对webservice有了一些了解。知道它就是一个http请求。只是需要按照指定的格式来传递数据（XML 报文）。通过webservice工具和Fiddler已经抓取了这个请求的报文，是一个xml。所以我决定自己直接通过Java的http请求发送报文来请求对于数据。这次可以成功返回数据，只是返回的数据还是xml，需要自己解析。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>webservice</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat启动报ClassNotFoundException错误，解决]]></title>
    <url>%2F2016%2F10%2F31%2Ftomcat-nullpointexception%2F</url>
    <content type="text"><![CDATA[今天把一个Maven管理的web项目Update后，启动Tomcat（Eclipse中）系统报错。错误提示 java.lang.ClassNotFoundException: ，显示是spring的ContextLoaderListener找不到。 之前也发生过，网上找了解决方案，不过忘记了，想想这次还是自己发一份，记一下。 错误原因：工程部署时在WEB-INF文件夹下没有生成lib目录，正常情况下，会生成lib目录并把工程的所有依赖jar包都部署到该目录下。 解决方案： 右键点击项目–选择Properties。选择Deployment Assembly,在右边点击Add按钮，在弹出的窗口中选择Java Build Path Entries 点击Next，选择Maven Dependencies 点击Finish，然后可以看到已经把Maven Dependencies添加到Web应用结构中了 操作完后，重新部署工程，不再报错了。工程WEB-INF目录下自动生成了lib目录，并且所有的依赖jar包也都已经部署进来。问题因此解决。 网上找的别人发布的原文地址：https://my.oschina.net/selfdesign/blog/547345]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>ClassNotFoundException</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习Java的视频资源（尚学堂）（比较老旧，但是还是挺好用）]]></title>
    <url>%2F2016%2F10%2F19%2Fshangxuetang-java-video%2F</url>
    <content type="text"><![CDATA[本人新手，转入IT，一开始在学校的时候看过尚学堂 马士兵讲过的java基础视频教程，这次深入学习呢，就从百度云盘找了一整套的视频资源。之后越深入的学习呢，发现这些视频资源VeryCD上都发布了，地址 《尚学堂科技.马士兵.JAVA集视频教程14年11月20日更新》 也可以在VeryCD上直接搜索马士兵，或者去网易云课堂找尚学堂的Java课程，也能找到。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
